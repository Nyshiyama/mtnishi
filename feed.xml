<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://nyshiyama.github.io/mtnishi/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nyshiyama.github.io/mtnishi/" rel="alternate" type="text/html" /><updated>2022-02-21T04:54:32+00:00</updated><id>https://nyshiyama.github.io/mtnishi/feed.xml</id><title type="html">Mt. Nishiブログ</title><subtitle>悠の個人ブログです。プログラミング、アニメ、本、映画、その他積極的に思ったことをアウトプットします。</subtitle><author><name>悠</name></author><entry><title type="html">WEEKLY OCHIAI：枝野代表に「覚悟」を問う</title><link href="https://nyshiyama.github.io/mtnishi/others/diary/20210602/weekly_ochiai/" rel="alternate" type="text/html" title="WEEKLY OCHIAI：枝野代表に「覚悟」を問う" /><published>2021-06-02T00:00:00+00:00</published><updated>2021-06-02T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/others/diary/20210602/weekly_ochiai</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/others/diary/20210602/weekly_ochiai/"><![CDATA[<p><a href="https://newspicks.com/movie-series/28?movieId=1290">WEEKLY OCHIAI シーズン4 | 枝野代表に「覚悟」を問う</a></p>

<blockquote>
  <p>来週9日に開催することで合意されている党首討論を前に、落合陽一と立憲民主党の枝野幸男代表による一対一の対談が実現。新型コロナ、オリンピック、経済、外交、原発・・・様々な課題について、どのようなビジョンを描いているのか？枝野代表に「覚悟」を問う。〈ゲスト〉●枝野幸男(立憲民主党代表)</p>
</blockquote>

<h2 id="番組メモ">番組メモ</h2>

<h3 id="10年を振り返る">10年を振り返る</h3>

<ul>
  <li>1935-45年に似ている</li>
  <li>日露戦争=高度成長の成功体験に縛られている</li>
  <li>今の自民党は多様性と柔軟性を失った、ムキになっている（時代状況にあっていない行動）</li>
  <li>コロナ対策は、一貫して楽観論、あと司令塔が分からない</li>
  <li>内閣官房がこの1年半機能していない</li>
</ul>

<h3 id="五輪">五輪</h3>

<ul>
  <li>五輪ができることの説明を果たして欲しい</li>
  <li>一度始まるとひと月半は止められない</li>
</ul>

<h3 id="コロナ">コロナ</h3>

<ul>
  <li>去年の秋に、世界の成功例を参考にできていれば</li>
  <li>五輪中止の費用はIOC賠償金には発展しないと思う、世論が許さない</li>
</ul>

<h3 id="民主党時代の政権交代">民主党時代の政権交代</h3>

<ul>
  <li>経験不足の不安と世論含めて盛り上がりすぎ</li>
  <li>閣僚経験者は片手数</li>
</ul>

<h3 id="今政権交代するなら">今政権交代するなら</h3>

<ul>
  <li>キーポイントは安心</li>
  <li>普通のことをしてほしい</li>
  <li>議席数的には、小選挙区制的に5％の有権者を動かせば可能</li>
  <li>150取れたらひっくり返るが、残り50</li>
  <li>政治関心、というよりかは野党への関心が高まっている</li>
  <li>ので、発信が重要になった、ので今はとにかくビラ</li>
</ul>

<h3 id="デジタル化">デジタル化</h3>

<ul>
  <li>ユーザーフレンドリーが大事</li>
  <li>各自治体からの発注権限を奪わないとデジタル庁の横串は機能しない</li>
</ul>

<h3 id="雇用">雇用</h3>

<ul>
  <li>正規雇用が原則だった時代に戻すべき</li>
  <li>雇用制度は動き出さないとダメ、やるならまず公的機関</li>
</ul>

<h3 id="地球温暖化">地球温暖化</h3>

<ul>
  <li>自然エネルギー、断熱、蓄電が三本柱</li>
  <li>やらざるを得ない規制強化</li>
  <li>火力発電を削除するのに原発に依存するのは逃げ</li>
  <li>送電網を公共事業化</li>
</ul>

<h3 id="ウイグル含む中国">ウイグル含む中国</h3>

<ul>
  <li>ウイグルチベットモンゴル台湾香港をセットで</li>
  <li>入管等国内の人権問題は対処した上で</li>
  <li>あと日米同盟</li>
  <li>ばいでんせいけんとは手を組みやすい</li>
  <li>経団連にはある程度我慢してくださいと政府がどれくらい強く言えるか</li>
  <li>中国に経済依存はしてはいけない</li>
</ul>

<h3 id="データと人権">データと人権</h3>

<ul>
  <li>大学非正規問題等をなくした教育等で中長期的な戦略のみ</li>
  <li>内需</li>
</ul>

<h3 id="10年後の展望">10年後の展望</h3>

<ul>
  <li>多様性、多様化</li>
</ul>

<h2 id="感想">感想</h2>

<p>落合陽一vs枝野幸男、1on1。佐々木さんもいないのははじめてなのか？見終わった感じ、たしかにファシリが他に必要ではなかったが。</p>

<p>全体を振り返ってみると、覚悟とやらを示したかは微妙。一部では具体的な方針まで示しており好感触だった（LGBTQで婚姻制度を変えるとか）。小選挙区で残り50をどう確保するか、有権者がようやく野党の発信に意識を傾け始めたから伝えることを軸に進める？選挙にどうやって勝つか、戦略面はしゃべってくれなかったな。ビラはともかく。</p>

<p>さすがにビラはびっくりした。落合さんもインタビュアー精神力でツッコミせず耐えたのかな。有権者のターゲット年齢層がよくわかる。いやまて、在宅ワークや巣篭もりが増えた今は、以前よりチラシに接する有権者も年齢問わず増えているのか？通勤時間に駅入口付近でビラ配りしていた分を各家庭ポストに鞍替えしたということか。まあ効果の程は知らないが、とくに若年層はクールじゃないと考える。パフォーマンス的には最低かもよ。</p>

<p>デジタル化を進めるには各自治体の発注権限を奪う……さて、できんの？ここはゴリ押しでもいいと思うが。中央集権に映って戦時を思い出し猛批判する勢力が現れる予感。今のデジタル庁は考えているのか？内部の人間がいくら優秀ですでに考えていても（まさに最後本人が「いや考えている人がいないわけではないだろうが」とw）頭が動かないとどうにもできないわけで。まさに頭のひとつになり得る枝野さんには少なくともここだけは期待していいのか？</p>

<p>雇用制度について、いわゆるジョブ型雇用に否定的なのははじめて知った。たしかに現状は、ジョブ型に沿った法改正等を進めようとするのに対して日本国内で見ると果たしてジョブ型となっているのか、それで生活していく素地があるのか疑問に思う面もある。しかしそこは他の話でも出ていたようにまず制度を作ってそれに流れるよう律すれば、なんだかんだ日本の流され主義をポジティブに活用できるんじゃないか。それに全部をジョブ型や正規に統一する必要はまったくない。公的機関は好きでやっている人より義務感や使命感で働いている人が多いと勝手に思っているが、エッセンシャルワーカー同様、そうした人たちが求める安定（≒安心）と最低限度の対価を保証するよう動くことはもちろん重要。まあそもそも論として、そうした仕事は本当に必要かというところから議論した方がいいのだが、そうすると人件”費”という話になって枝野さんの本意ではなくなるのか。</p>

<p>デジタル庁が目指す横串をやってるところがある？どこだ。というか国という大本ができてなきゃどこかで串が空振るぞ。コロナワクチンの管理データも自治体が各自でどれだけ整理できようと、一歩隣の自治体に移動したら泡となる努力。</p>

<p>かなり幅広い分野で質問したな。1時間しかないなら、もう少し分野を絞って深掘りした方が、本質に迫りやすかったんじゃないかな。ほうぼうで発言していることをひとつの番組でまとめたような印象を持った。インタビュアーという立場を表明してしまった以上、ちゃぶ台返しできなかったか。その意味では、むしろ佐々木さんをインタビュアー兼ファシリで生贄（笑）にして、落合さんはいつもみたいな鋭いツッコミに徹してくれた方が、この番組ならでは感は出たかも。</p>

<p>政治家が出てくると毎回コメント欄荒れるな。</p>

<p>#落合寝ろw</p>]]></content><author><name>悠</name></author><category term="Others" /><category term="Diary" /><category term="NewsPicks" /><category term="WEEKLY OCHIAI" /><category term="枝野幸男" /><summary type="html"><![CDATA[まさかの1on1。落合vs枝野。]]></summary></entry><entry><title type="html">トネ・コーケン著ライトノベル原作「スーパーカブ」を6話まで視聴</title><link href="https://nyshiyama.github.io/mtnishi/entertainment/anime/20210530/anime-supercub/" rel="alternate" type="text/html" title="トネ・コーケン著ライトノベル原作「スーパーカブ」を6話まで視聴" /><published>2021-05-30T00:00:00+00:00</published><updated>2021-05-30T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/entertainment/anime/20210530/anime-supercub</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/entertainment/anime/20210530/anime-supercub/"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/NbWU6B0qjMY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p><a href="https://supercub-anime.com/">TVアニメ「スーパーカブ」公式サイト</a></p>

<p>スーパーカブ賛美歌、もとい賛美アニメ。日本女子高生が両親もいない、趣味もない、ないないづくしだったが通学の足として中古のスーパーカブを購入したことから世界が鮮やかになっていくお話。</p>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%B3%E3%83%80%E3%83%BB%E3%82%AB%E3%83%96">ホンダ・カブ - Wikipedia</a>。死ぬほど詳しく書いてるw</p>

<p>原付か……。教習所で普通車免許を取ったとき、講習1回だけ原付の試乗があった。脚が長いせいで（どうもすいませんねぇ）ハンドルを限界まで曲げようとすると脚に当たるからイライラが爆発した。車種は知らん。</p>

<p>やっぱり全話配信されるまで待ったほうがよかったかな。いやしばらく経ってから続きを見ることで内容を思い出し、記憶に定着できる。ライブ感というか、自分の中で勢いは弱まるが。</p>

<p>現実的なスカート丈が似合う女の子を書かせたら博さんの右に出るものはいないと勝手に思っている。その人がキャラクター原案、ライトノベルのイラストも担当している。あと黒髪の動きがきれい。なんだけど、アニメで十分に再現されているかと言われると……博さんが書いている漫画「明日ちゃんのセーラー服」からイメージしてしまうが（スーパーカブは読んでいない）、いま一歩鮮やかさが足りない感じ。あとは頬の赤み。縦線を長く描いて強調しすぎており、ガーンって顔のエフェクトをかけているような不自然な感じが否めない。逆に言えば縦線が長く見えない場面ではらしさというかキャラが可愛く描かれている。</p>

<p>演出に工夫をこらして、基本地味な作風ながら鮮やかさをうまく組み込んでいる。でもまあ地味なんだが笑　これほど地味な夏休みも珍しい。</p>

<p>全体としてはどうしても地味な雰囲気と、設定や周りとの関係も含めて必要最小限のつながりを意識した日常の世界観が許容できるなら、小熊のかわいさを堪能しつつ（変態目線の言い方になった）、演出の勉強をなんとなくしながらカブ魂を楽しめる。自分的には新しいPCを買ったときの感覚に近い。</p>]]></content><author><name>悠</name></author><category term="Entertainment" /><category term="Anime" /><category term="スーパーカブ" /><category term="トネ・コーケン" /><category term="博" /><category term="ライトノベル原作" /><category term="2021年春アニメ" /><summary type="html"><![CDATA[スーパーカブを6話まで視聴した。ネトフリにない……！？Amazonにあった。よかったよかった。]]></summary></entry><entry><title type="html">釣り@ウミック</title><link href="https://nyshiyama.github.io/mtnishi/others/diary/20210529/fishing-umikku/" rel="alternate" type="text/html" title="釣り@ウミック" /><published>2021-05-29T00:00:00+00:00</published><updated>2021-05-29T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/others/diary/20210529/fishing-umikku</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/others/diary/20210529/fishing-umikku/"><![CDATA[<p><a href="http://umikku.com/">ウミック-若狭湾・音海ー</a></p>

<p>人生初のライトショアジギング。</p>

<p><img src="/mtnishi/assets/images/before-learving-fishing-20210529.jpg" alt="alt" /></p>
<figcaption>出船待ち。別にコロナとか関係なくこれくらい混むらしい。</figcaption>
<p></p>

<p>釣れたのはエソ笑。でもサイズは50cmクラス。邪道ジギングだけど。というのも、カゴ付き胴突き仕掛けで釣れた豆サバ2匹を針に引っ掛けて、その仕掛けのおもり代わりに21gジグをつけた状態でヒットしたから。しかもサバの方。ジグですらないw</p>

<p><img src="/mtnishi/assets/images/eso-fishing-20210529.jpg" alt="alt" /></p>
<figcaption>自分で言うのも何だがでかい</figcaption>
<p></p>

<p>疲れた。行きは山道で車酔いするし、釣り中はジギングをしていたので一睡もせず、帰りは5分ほど気絶してよだれを垂らしたくらい。</p>

<p><img src="/mtnishi/assets/images/hitode-fishing-20210529.jpg" alt="alt" /></p>
<figcaption>魚ですらない</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/takahamagennpastu-fishing-20210529.jpg" alt="alt" /></p>
<figcaption>当日の潮は高浜原発に向かって吸い込まれる方向だったw</figcaption>
<p></p>]]></content><author><name>悠</name></author><category term="Others" /><category term="Diary" /><category term="釣り" /><category term="趣味" /><category term="エソ" /><summary type="html"><![CDATA[福井県大飯郡高浜町音海のウミックにて、筏釣りに興じた。自分の釣果は50cmのエソ1匹笑]]></summary></entry><entry><title type="html">【Swift】CSVを読み込んでCoreDataに保存（Xcode12.4、Swift 5.3.2）</title><link href="https://nyshiyama.github.io/mtnishi/system/programming/20210528/swift-load-csv-to-coredata/" rel="alternate" type="text/html" title="【Swift】CSVを読み込んでCoreDataに保存（Xcode12.4、Swift 5.3.2）" /><published>2021-05-28T00:00:00+00:00</published><updated>2021-05-28T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/system/programming/20210528/swift-load-csv-to-coredata</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/system/programming/20210528/swift-load-csv-to-coredata/"><![CDATA[<p>ボタンを押したらCSVファイルを読み込んでCoreDataに保存する。</p>

<p><img src="/mtnishi/assets/images/coredata-load-csv-button.jpg" alt="alt" /></p>

<p>試しで作ったCSVファイルはこれ。1行目で属性名を説明代わりに入れており、最後の行はXcodeでcsvファイルを作成すると自動的に改行される。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>index,title
0,A1
1,A2
2,A3

</code></pre></div></div>

<h2 id="実装の流れアルバムの場合">実装の流れ（アルバムの場合）</h2>

<ol>
  <li>CoreData上のデータを削除</li>
  <li><code class="language-plaintext highlighter-rouge">Bundle</code>を使ってcsvファイルのパスを取得し、まず文字列としてcsvファイルを読み込む</li>
  <li>改行位置で分割した配列を作成</li>
  <li>先頭と最後は余計なデータが付いているので削除</li>
  <li>新しいデータをCoreData上に作って、属性（Attributes）に読み取ったデータを型変換しながら代入</li>
</ol>

<p>個人的にはあまりスマートではない印象。属性を配列の要素としてひとまず扱っているから、属性にデータを代入する際、要素番号で指定しているのって見た目ダサない？これだとCSVファイルの内容が間違っているときの対応を書くのも面倒そうだし。構造体でも使うのかねぇ……「たった2日」のLesson day 2-4でJSONファイルを読み込んでいたが、あんな感じかな、と思いつつ、とりあえず実装できているんだから賢くコーディングするのは後回し。</p>

<!-- START MoshimoAffiliateEasyLink -->
<script type="text/javascript" src="/mtnishi/assets/js/affiliate/tattafutsukademasuta.js"></script>

<div id="msmaflink-ybY2M">リンク</div>
<p></p>
<!-- MoshimoAffiliateEasyLink END -->

<p>アルバムとトラックの2つを扱っているけど、トラックはほぼアルバムそのままなのでいったん省略して、アルバムの処理について以下にコードを載せておく。こんなに<code class="language-plaintext highlighter-rouge">static</code>を使っているとアホそうな実装だと思うのはおれだけ？笑</p>

<p>下の中身を多少？詳しく説明していたりそもそもCoreDataの扱いを時分なりに理解した話は</p>

<p><a href="/mtnishi/system/programming/20210421/swift-coredata/">CoreData：データの更新について（Xcode12.4、Swift 5.3.2）（April 21, 2021）</a>
と、</p>

<p><a href="/mtnishi/system/programming/20210422/swift-coredata_and_tableview/">CoreDataをTableViewで扱う（リストの並び替え、削除との連携について）（Xcode12.4、Swift 5.3.2）（April 22, 2021）</a>
に書いていたりする。</p>

<p>参考資料は</p>

<p><a href="https://re-engines.com/2018/06/11/swiftcsv%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BFrealm%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/">[Swift]CSVを読み込みRealmに保存してみる | RE:ENGINES</a></p>

<p><a href="https://qiita.com/motokiohkubo/items/ab150591a7ddea830b86">SwiftでCSVデータを読み込んでコンソールに出力 - Qiita</a></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">CoreData</span>

<span class="kd">class</span> <span class="kt">CoreDataModel</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">loadCSV</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">loadAlbumsCSV</span><span class="p">()</span>
        <span class="nf">loadTracksCSV</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">loadAlbumsCSV</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">path</span><span class="p">(</span><span class="nv">forResource</span><span class="p">:</span><span class="s">"Albums"</span><span class="p">,</span> <span class="nv">ofType</span><span class="p">:</span><span class="s">"csv"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Failed to find Albums.csv."</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="k">do</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">csv</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">String</span><span class="p">(</span><span class="nv">contentsOfFile</span><span class="p">:</span> <span class="n">path</span><span class="p">,</span> <span class="nv">encoding</span><span class="p">:</span> <span class="kt">String</span><span class="o">.</span><span class="kt">Encoding</span><span class="o">.</span><span class="n">utf8</span><span class="p">)</span>
            <span class="k">var</span> <span class="nv">groupedAttributesOfAlbums</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="nf">components</span><span class="p">(</span><span class="nv">separatedBy</span><span class="p">:</span> <span class="o">.</span><span class="n">newlines</span><span class="p">)</span>

            <span class="c1">// 余計なデータを削除</span>
            <span class="n">groupedAttributesOfAlbums</span><span class="o">.</span><span class="nf">removeFirst</span><span class="p">()</span> <span class="c1">// 先頭行のラベル</span>
            <span class="k">if</span> <span class="n">groupedAttributesOfAlbums</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span> <span class="c1">// 末尾の空要素（csv末尾に改行のみあれば）</span>
                <span class="n">groupedAttributesOfAlbums</span><span class="o">.</span><span class="nf">removeLast</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="c1">// 旧データを削除</span>
            <span class="k">let</span> <span class="nv">oldAlbums</span> <span class="o">=</span> <span class="nf">fetchAlbums</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
            <span class="n">oldAlbums</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span><span class="nf">delete</span><span class="p">(</span><span class="nv">album</span><span class="p">:</span> <span class="nv">$0</span><span class="p">)}</span>

            <span class="k">for</span> <span class="n">groupedAttributesOfAlbum</span> <span class="k">in</span> <span class="n">groupedAttributesOfAlbums</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">attributesOfAlbum</span> <span class="o">=</span> <span class="n">groupedAttributesOfAlbum</span><span class="o">.</span><span class="nf">components</span><span class="p">(</span><span class="nv">separatedBy</span><span class="p">:</span> <span class="s">","</span><span class="p">)</span>
                <span class="k">let</span> <span class="nv">album</span> <span class="o">=</span> <span class="nf">newAlbum</span><span class="p">()</span>

                <span class="n">album</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="kt">Int16</span><span class="p">(</span><span class="n">attributesOfAlbum</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">!</span>
                <span class="n">album</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">attributesOfAlbum</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="p">}</span>

            <span class="nf">save</span><span class="p">()</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">error</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Failed to load csv: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">."</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">newAlbum</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Album</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">appDelegate</span> <span class="o">=</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">abort</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">managedContext</span> <span class="o">=</span> <span class="n">appDelegate</span><span class="o">.</span><span class="n">persistentContainer</span><span class="o">.</span><span class="n">viewContext</span>
        <span class="k">let</span> <span class="nv">entity</span> <span class="o">=</span> <span class="kt">NSEntityDescription</span><span class="o">.</span><span class="nf">entity</span><span class="p">(</span><span class="nv">forEntityName</span><span class="p">:</span> <span class="s">"Album"</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="n">managedContext</span><span class="p">)</span><span class="o">!</span>
        <span class="k">let</span> <span class="nv">album</span> <span class="o">=</span> <span class="kt">Album</span><span class="p">(</span><span class="nv">entity</span><span class="p">:</span> <span class="n">entity</span><span class="p">,</span> <span class="nv">insertInto</span><span class="p">:</span> <span class="n">managedContext</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">album</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">fetchAlbums</span><span class="p">(</span><span class="n">with</span> <span class="nv">predicate</span><span class="p">:</span> <span class="kt">NSPredicate</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Album</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">appDelegate</span> <span class="o">=</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">abort</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">managedContext</span> <span class="o">=</span> <span class="n">appDelegate</span><span class="o">.</span><span class="n">persistentContainer</span><span class="o">.</span><span class="n">viewContext</span>
        <span class="k">let</span> <span class="nv">fetchRequest</span> <span class="o">=</span> <span class="kt">NSFetchRequest</span><span class="o">&lt;</span><span class="kt">NSManagedObject</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">entityName</span><span class="p">:</span> <span class="s">"Album"</span><span class="p">)</span>
        <span class="n">fetchRequest</span><span class="o">.</span><span class="n">predicate</span> <span class="o">=</span> <span class="n">predicate</span>
        <span class="n">fetchRequest</span><span class="o">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="p">[</span>
            <span class="kt">NSSortDescriptor</span><span class="p">(</span><span class="nv">key</span><span class="p">:</span> <span class="s">"index"</span><span class="p">,</span> <span class="nv">ascending</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="p">]</span>
        <span class="n">fetchRequest</span><span class="o">.</span><span class="n">includesSubentities</span> <span class="o">=</span> <span class="kc">false</span>

        <span class="k">do</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">albums</span> <span class="o">=</span> <span class="k">try</span> <span class="n">managedContext</span><span class="o">.</span><span class="nf">fetch</span><span class="p">(</span><span class="n">fetchRequest</span><span class="p">)</span> <span class="k">as!</span> <span class="p">[</span><span class="kt">Album</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">albums</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">error</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>
            <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Could not fetch albums. </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">, </span><span class="se">\(</span><span class="n">error</span><span class="o">.</span><span class="n">userInfo</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">save</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">appDelegate</span> <span class="o">=</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">abort</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="n">appDelegate</span><span class="o">.</span><span class="nf">saveContext</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">delete</span><span class="p">(</span><span class="nv">album</span><span class="p">:</span> <span class="kt">Album</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">appDelegate</span> <span class="o">=</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">abort</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">managedContext</span> <span class="o">=</span> <span class="n">appDelegate</span><span class="o">.</span><span class="n">persistentContainer</span><span class="o">.</span><span class="n">viewContext</span>
        <span class="n">managedContext</span><span class="o">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">album</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="補足省略したトラックの扱い">補足：省略したトラックの扱い</h2>

<p>だいたいアルバムの処理と同じだが、特定のアルバムとリレーションをもたせた上で作成したいので、</p>

<ol>
  <li>CSVファイルにはアルバムのindexを属性として含めておき、</li>
  <li>上記<code class="language-plaintext highlighter-rouge">let album = newAlbum()</code>部分に該当するところより前で<code class="language-plaintext highlighter-rouge">let albums = fetchAlbums(with: nil)</code>として読み込んだアルバムデータの配列を持っておき、</li>
  <li><code class="language-plaintext highlighter-rouge">let track = newTrack(into: albums[Int(attributesOfTrack[ここはリレーションをもたせたいアルバムのindexを格納している要素番号])!])</code>で狙ったアルバムのトラックとしてデータを作成する</li>
  <li>あとは属性を代入</li>
</ol>]]></content><author><name>悠</name></author><category term="System" /><category term="Programming" /><category term="Swift" /><category term="CoreData" /><category term="CSV" /><summary type="html"><![CDATA[CoreDataを使って、音楽アプリのアルバムとトラックをそれぞれ`Album`、`Track`エンティティとして管理しているが、それらをCSVファイルで管理できるようにしたい。手始めに、手動でCSVファイルを作り、プログラムで読み込んでそれらをCoreDataに保存させた。やってみたらスマートではないかもしれないが簡単に実装できた。]]></summary></entry><entry><title type="html">【Swift】CoreDataのリレーションを操作（Xcode12.4、Swift 5.3.2）</title><link href="https://nyshiyama.github.io/mtnishi/system/programming/20210527/swift-coredata-relationships/" rel="alternate" type="text/html" title="【Swift】CoreDataのリレーションを操作（Xcode12.4、Swift 5.3.2）" /><published>2021-05-27T00:00:00+00:00</published><updated>2021-05-27T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/system/programming/20210527/swift-coredata-relationships</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/system/programming/20210527/swift-coredata-relationships/"><![CDATA[<p><img src="/mtnishi/assets/images/xcode-xcdatamodeld-album-tracks.jpg" alt="alt" /></p>
<figcaption>こんな感じで、Album1つに対してTrackが複数つながったRelationshipをもっている</figcaption>

<h2 id="調査">調査</h2>

<h3 id="removefromentityとdeleteの違い">removeFromEntity()とdelete()の違い</h3>

<p>なんがねぇがと調べていたが、Album+CoreDataProperties.swiftファイル（エンティティを作ったら自動生成される）に</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@objc</span><span class="p">(</span><span class="nv">removeTracksObject</span><span class="p">:)</span>
    <span class="kd">@NSManaged</span> <span class="kd">public</span> <span class="kd">func</span> <span class="nf">removeFromTracks</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Track</span><span class="p">)</span>
</code></pre></div></div>

<p>というメソッドが登録されていた。remove？じゃあ以下のような<code class="language-plaintext highlighter-rouge">delete()</code>との違いは？今までCoreDataからデータを削除するのに使っていたのだが……</p>

<p>参考：</p>

<p><a href="/mtnishi/system/programming/20210422/swift-coredata_and_tableview/">CoreDataをTableViewで扱う（リストの並び替え、削除との連携について）（Xcode12.4、Swift 5.3.2）（April 22, 2021）</a></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">func</span> <span class="nf">delete</span><span class="p">(</span><span class="nv">track</span><span class="p">:</span> <span class="kt">Track</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">appDelegate</span> <span class="o">=</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">delegate</span> <span class="k">as?</span> <span class="kt">AppDelegate</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">abort</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">managedContext</span> <span class="o">=</span> <span class="n">appDelegate</span><span class="o">.</span><span class="n">persistentContainer</span><span class="o">.</span><span class="n">viewContext</span>
        <span class="n">managedContext</span><span class="o">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">track</span><span class="p">)</span> <span class="c1">// delete()を呼んだ後もsaveContext()されるまでは確定されない</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><a href="https://stackoverflow.com/questions/58920544/coredata-removefrom-vs-delete">swift - CoreData removeFrom vs delete - Stack Overflow</a>にあるように</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">removeFromEntity()</code>はリレーションのみ削除</li>
  <li><code class="language-plaintext highlighter-rouge">delete()</code>はデータ自体を削除</li>
</ul>

<h3 id="実装の雰囲気">実装の雰囲気</h3>

<p>したがって、1つの<code class="language-plaintext highlighter-rouge">album: Album</code>に対してリレーションをもっている<code class="language-plaintext highlighter-rouge">tracks: [Track]</code>に対して、<code class="language-plaintext highlighter-rouge">tracks[i]</code>のリレーションを変更する場合、移動先のアルバムを<code class="language-plaintext highlighter-rouge">targetAlbum: Album</code>として</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">album</span><span class="o">.</span><span class="nf">removeFromTracks</span><span class="p">(</span><span class="n">tracks</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1">// 現在のAlbumとrelationshipを削除</span>
<span class="n">tracks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="kt">Int16</span><span class="p">(</span><span class="n">targetAlbum</span><span class="o">.</span><span class="n">count</span><span class="p">)</span> <span class="c1">// （CoreData上は並び順が保存されないのでAttributeとしてindexを加えている場合、`tracks[i].index`を変更する。この場合は移動先末尾に加えられることになる。）</span>
<span class="n">targetAlbum</span><span class="o">.</span><span class="nf">addToTracks</span><span class="p">(</span><span class="n">tracks</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1">// 移動先のAlbumに加える</span>
<span class="n">tracks</span><span class="o">.</span><span class="nf">remove</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">i</span><span class="p">)</span> <span class="c1">// albumもちのtracksからは削除</span>

<span class="c1">// 移動したtracks[i]より後ろの要素分のみ、CoreDataのindexを更新する</span>
<span class="k">let</span> <span class="nv">filteredTracks</span> <span class="o">=</span> <span class="n">tracks</span><span class="o">.</span><span class="kd">lazy</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span> <span class="nv">$0</span><span class="o">.</span><span class="n">index</span> <span class="o">&gt;</span> <span class="kt">Int16</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">})</span>
<span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">filteredTracks</span><span class="p">)</span> <span class="k">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">filteredTracks</span><span class="o">.</span><span class="n">indices</span><span class="p">,</span> <span class="n">filteredTracks</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// filteredTracks.enumerated()ではindexが必ず0から始まってしまうのでzip()を使う</span>
    <span class="n">filteredTracks</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="kt">Int16</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>細かくコメントを書いたのでとくに解説はなし。</p>

<h2 id="まとめ">まとめ</h2>

<p>ググルの適当だったからか、直接リレーションを操作しているような記事には行き着かなかった。なので自分の思いつき。まあ無難な実装ではないか？</p>]]></content><author><name>悠</name></author><category term="System" /><category term="Programming" /><category term="Swift" /><category term="CoreData" /><category term="Relationships" /><summary type="html"><![CDATA[CoreDataを使って、音楽アプリのアルバムとトラックをそれぞれ`Album`、`Track`エンティティとして管理しているが、トラックを現在のアルバムから別のアルバムに移動させたくなった。]]></summary></entry><entry><title type="html">WEEKLY OCHIAI：ワクチン接種・最速化戦略</title><link href="https://nyshiyama.github.io/mtnishi/others/diary/20210526/weekly_ochiai/" rel="alternate" type="text/html" title="WEEKLY OCHIAI：ワクチン接種・最速化戦略" /><published>2021-05-26T00:00:00+00:00</published><updated>2021-05-26T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/others/diary/20210526/weekly_ochiai</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/others/diary/20210526/weekly_ochiai/"><![CDATA[<p><a href="https://newspicks.com/movie-series/28?movieId=1278">WEEKLY OCHIAI シーズン4 | ワクチン接種・最速化戦略</a></p>

<blockquote>
  <p>各地で高齢者向けの大規模接種が始まり、接種の加速化が期待される新型コロナウイルスのワクチン。しかし、日本の接種率は主要国と比べると圧倒的に低く、感染力が強いと言われるインド型変異株への警戒も高まっている。コロナを巡る状況はどうなるのか？ワクチン接種の課題、そして接種を最速化するための戦略を考える。〈ゲスト〉●高島宗一郎(福岡市長)●宮坂昌之(大阪大学免疫学フロンティア研究センター招へい教授)●宮田裕章(慶応義塾大学医学部教授)</p>
</blockquote>

<h2 id="視聴メモ">視聴メモ</h2>

<h3 id="ワクチンの現状">ワクチンの現状</h3>

<ul>
  <li>中和抗体はほぼ感染者に確実にできて、どの変異株にも反応できる（横浜市立大等）から、既存のワクチンは効果十分</li>
  <li>ウイルスを不活化する抗体は中和抗体（スパイク蛋白質に対する抗体の一部）だけでなく、抗体上にさらに血中の補体が結合してその複合体がウイルスを溶かす（ミサイル様抗体）、ウイルスに結合すると食細胞がウイルス抗体複合体をつかんで食べてしまう（食作用促進性抗体）、他にも抗体関係なしにT細胞も反応してウイルスが排除される</li>
  <li>スパイク蛋白質が変異すると免疫が効かないというのは誤っており、さらにその表面に目印があり複数の目印に対して抗体が結合する</li>
  <li>インド変異株に対しても、ファイザー93% vs 88%, アストラザネカ66% vs 60%（1回のみ）</li>
  <li>抗体が下がった人でもワクチンを打ち直せば必ず免疫力は上がる。毎年新しいワクチンを打てば問題ない（現状は各社1種類のみだが）</li>
  <li>接種後11日目以降に抗体がぐっと増える人が多数、なのでワクチン1回で気を緩めないこと（確率はゼロにならない、シートベルトみたいな）</li>
  <li>ウイルスの変異度合いはインフルエンザやエイズに比べるとかなり低い</li>
  <li>日本人と他の違いは今の所データがないが、既存のワクチンではそんなことがないし、どの国でも副反応の割合はほぼ同じなので、違いはなさそう</li>
  <li>OECDで最下位の接種率（5.23%）</li>
</ul>

<h3 id="ワクチン接種戦略福岡市を事例にして">ワクチン接種戦略（福岡市を事例にして）</h3>

<ul>
  <li>市内クリニック約750箇所で最終的に1日2万回打つ（全体の2、3割）</li>
  <li>5月28日から夜間17時〜22時に高齢者に接触する人や保育園職員、学校教職員</li>
  <li>以上を7月いっぱいで終わらせる</li>
  <li>国の1日100万ノルマに対して、人口比率的に福岡市は達成する戦略</li>
  <li>今年の初めの時点から福岡市の特徴を把握してワクチン体制をつくる議論を進めてきた</li>
  <li>集団接種も考えていたが、クリニック中心のほうが早くできそうということでそっち中心</li>
  <li>全市区町村個別に戦略を考えている</li>
  <li>その人が引っ越したら？……日本全体の問題</li>
  <li>行政のデータ管理には100ベンダーが参加している</li>
  <li>かかりつけ医を持たない人に対応するため、オープン予約として外の人間を受け入れられるクリニック</li>
  <li>開業医の電子カルテが広まっていない国の問題</li>
  <li>アメリカでも最初データ管理に混乱したが、AWS（民間）がまとめた</li>
  <li>福岡市はヘルスアミュレットという民間アプリで接種台帳のデータ管理（<a href="https://prtimes.jp/main/html/rd/p/000000012.000060435.html">新型コロナワクチン接種支援アプリ「Health Amulet」、JALなど複数の企業等で普及の推進へ。福岡市では集団接種会場で紹介。｜株式会社ミナケアのプレスリリース</a>）</li>
</ul>

<h3 id="戦略の課題">戦略の課題</h3>

<ul>
  <li>民間を束ねながら行政と連携するオペレーションが必要</li>
  <li>8割は民間で2割行政管理の病床管理の失敗</li>
  <li>根性でどうにもなれない人・街は置いてきぼり</li>
  <li>始まる前からオペレーションを共有したい、現状は実際の成功事例を見てからそれを真似する（可能性）</li>
  <li>機能デザインであってグランドデザインではないロジ</li>
  <li>ウォーターフォール型で行政が発注してベンダーが待っている状態</li>
  <li>医療行政は平時のまま（歯科医師すら簡単にワクチン接種に参加できないとか）</li>
  <li>日本はバイオテロ、パンデミックにすごく弱いということを証明した</li>
  <li>医療行政はプロフェッショナルオートノミー（<a href="https://www.med.or.jp/doctor/member/kiso/k6.html#:~:text=%E5%8C%BB%E5%B8%AB%E3%81%A8%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%88%E3%83%8E%E3%83%9F%E3%83%BC%E3%81%AE,%E8%87%AA%E7%94%B1%E3%82%92%E6%84%8F%E5%91%B3%E3%81%99%E3%82%8B%E3%81%A8%E5%85%B1%E3%81%AB%E3%80%81">医の倫理の基礎知識｜医師のみなさまへ｜医師のみなさまへ｜公益社団法人日本医師会</a>）に任されてしまっている（自由標榜で量がコントロールできない）が、今後は室の担保等国として医師をどう育てるか</li>
  <li>水際対策を同時にしていくべき、現場は最善の権限とマンパワーでがんばっているが、最長で10日の待機を一部の国のみが限界</li>
  <li>特措法48条は気づいたら削除されていた（臨時の医療施設をつくる　<a href="https://www.mhlw.go.jp/content/000621064.pdf">000621064.pdf</a>）→31条に統合された</li>
</ul>

<h3 id="ワクチンの生産">ワクチンの生産</h3>

<ul>
  <li>国内産は来年には使えそう</li>
  <li>昔の失敗から厚労省はワクチン開発に距離をおいてしまって、ワクチン開発に日本政府が全然投資しなかった</li>
  <li>日本はスペイン風邪以来のパンデミックがなかった</li>
  <li>日本後発ワクチンの大変なところは、プラセーボ群を集めにくくなる（2分の1の確率でワクチンが打たれないから）ので、マッチング手法とか新しい手法を使う必要がある</li>
  <li>ワクチンをたくさん打っているところは感染者が多い国</li>
</ul>

<h3 id="ブラックボード">ブラックボード</h3>

<ul>
  <li>（高島）低負担高福祉は不可能。痛みなければベネフィットがない「日本を最速で変える方法」</li>
  <li>（宮坂）焦らずあわてずあきらめず</li>
  <li>（宮田）最善は変わる</li>
  <li>（落合）サンクコスト=回収ができなくなった投資費用</li>
</ul>

<h3 id="my感想">My感想</h3>

<p>いいかげんこの番組で聞き飽きてきたな、平時戦略で有事に対応する。あとウォーターフォール型アジャイル開発w　レイヤー構造はこの前以来か。</p>

<p>話の大体は、結局自治体ひとつががんばったところで国がなんとかしない限りはどうしようもないところがいっぱいあって、福岡市は根性があるからうまいことできているんだよなだが、話の中で少なくともひとつは国の手前の話じゃないかと思った。地方自治体同士の連携って国の仲介とかいるの？オペレーションの中身は地方自治体に国がぶん投げたということだが、じゃあ各々で作成・議論した中身を自治体同士が共有するときに法律・憲法上の縛りってない気がするが。それってグランドデザインじゃねぇなって落合さんが言ってたあたりの話、スタイルが似ている自治体の成功事例を真似してどうのってのは、成功するかを待っているとまさに成功都市は7月中に目標を達成するがそれに1イテレーション消費されるという側面がある。それならば、事前に似ているところなんてわかるんだからオペ内容を見せ合いっこしようぜってならなかったのだろうか。似ている自治体なんてないから無理って言われたら、あーそうですかじゃあ1人でがんばってとなるが。だってそんなことを言われたら国に音頭をとってもらうにしてもその自治体専用の方針を国が出さないといけなくなる。</p>

<p>中盤はなんか暗かったね。日本のポンコツ具合を語る現場に政府職員が1人もいないのは意味がないように思える。たしかに落合さん含めて政府関係者に近い人が集まってはいるけど、この番組から日本政府が動くようになるとはどうしても思えない。間接的に動けば御の字か。あとパンピー視聴者がこれを見て少しでも日本の現状に気づいて民間でできる最善を尽くそうと思えるようになれば。わたし？不要不急の外出は控えます。あと、ワクチン接種は20代なのでたぶん超後半になるだろうからそのときに出ている日本人の副反応のデータを見て接種するか判断します（またはかかりつけ医のアレルギー科先生に安全性を確認してもらえるならしてもらう）。あ、あれ？行政の執行側と1ミリもつながっていない？（笑）</p>

<p>隣の芝生は青いとアメリカ他のワクチン政策を持ち上げるメディアだが、データの一元管理をAWSががんばったという話ははじめて聞いたな。ワイドショーの話は普段から聞かないようにしている。さてどこまでがワイドショーなのか。ともかく、日本はデータ管理が死んでいるが、民間1社ががんばったところでそりゃどうしようもないだろう。別に日本でもAWSをハブとして100ベンダーをまとめあげて「民間たちーAWSー行政」みたいなレイヤー構造を作ったらいいのに。しちゃいけんて法律でもあるのか、まず行政が1本横に棒をぶっささないといけないのか。</p>

<p>バイオテロはたしかにどうしようもないことになりそう。いや、逆に人工的な災害だから有事の対応を取れる可能性がある。明確な敵意に対してはさすがにねぇ……と思うけど。まあ仮にコロナが実は武漢の実験施設からもれた人工ウイルスでしたってなっても、中国に対する風当たりを強くするだけで、むしろ国内グダグダの口実を見つけたと意気揚々になるのかな。やめとこうこの不毛な話は。</p>

<p>宮田さんの五輪話が、まさに「最善は変わる」という話。「数ヶ月前のシミュレーションを元に現在も開催可能だとしている」。少なくともウォーターフォール型アジャイルの平時対応では、今後の有事にどんどん対応できなくなるのは間違いない。時々の最善を目指して、その最善が180度変わることはさすがにないから常に軌道を微修正しつつ軟着陸を目指すためにこの国は何ができるか。いやできることみんながしたいと思っていてしないといけないことはもう明らかになっているが笑</p>

<p>自転車操業の現状で、なんだかんだワクチン接種4、5割いって感染者が減ってきて楽勝モードになって有事を忘れる未来と見た。</p>]]></content><author><name>悠</name></author><category term="Others" /><category term="Diary" /><category term="NewsPicks" /><category term="WEEKLY OCHIAI" /><category term="コロナ" /><summary type="html"><![CDATA[暗いというか、日本の現状悲しいバナシが多かった。ワクチン1回目から10日程度立たないとほとんどの人に中和抗体はできないよって話は死ぬほど報道しまくったほうがいい。]]></summary></entry><entry><title type="html">CNN10が8月まで放送休止</title><link href="https://nyshiyama.github.io/mtnishi/others/english/20210525/cnn10/" rel="alternate" type="text/html" title="CNN10が8月まで放送休止" /><published>2021-05-25T00:00:00+00:00</published><updated>2021-05-25T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/others/english/20210525/cnn10</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/others/english/20210525/cnn10/"><![CDATA[<p><a href="https://edition.cnn.com/cnn10">CNN 10 - CNN</a></p>

<p>リスニング教材として利用している。詳細は<a href="/mtnishi/others/english/20210423/cnn10/">CNN10ニュースでリスニングを強化……しようとしている（April 23, 2021）</a>で思いついた長所とかをあげている。</p>

<p>2021年5月24日放送で、</p>

<blockquote>
  <p>this Friday, our show will be on hiatus until this August.</p>

  <p><a href="http://transcripts.cnn.com/TRANSCRIPTS/2105/24/sn.01.html">CNN.com - Transcripts - 2021/05/24</a></p>
</blockquote>

<p>聞いてない（マクゴナガル「では、今言いました」）。</p>

<p>どうすっか……ひとつは、CNNの別コンテンツを適当に回し見る。長くてもひとつ3分くらい？意外とこれはこれで使えそう。とりあえずWorld。</p>

<p><a href="https://edition.cnn.com/world">World news – breaking news, videos and headlines - CNN</a></p>

<p>あるいは、内容を覚えているアニメをNetflixで英語字幕英語音声選べるものを観る？と思ってひとまずA.I.C.O.を観てみたが、英語字幕が合っていなさすぎて草。</p>

<p>カートゥーン（アニメ）が英語学習によくオススメされるけど、楽しく見れないんだよな。あとはジブリか。北米版DVDかブルーレイがいるけど、いちいちテレビで観ないとあかんからなぁ。スマホに入れられたらいいんだけど、とくに新しいのはコピーガードが硬かったりする？らしいのでたぶんゴニョゴニョはできない。そういえばと思って、数年前にYouTubeで魔女宅フルムービーを見かけたが、今日検索しても見つけられなかった。そりゃ消されるわな。</p>

<p><a href="https://www.english-can.com/study-anime/">英語学習におすすめしたいアニメ１２選！※Youtube・Netflixで探してみた。 - 英語CAN.com</a></p>

<p>ということで、今週が終わった後はCNNの別コンテンツを子守唄代わりに聞くこととする。</p>

<p>ちなみに、最近はやっぱり寝る前なので画面を見たくなくて</p>

<ol>
  <li>音声のみで1回聞いて</li>
  <li>まだ眠たくなければもう1周。これは寝落ちすると思ったらおとなしく寝る</li>
  <li>次の日にわからない単語を含む文章を最低ひとつはReminDOに登録する（日本語→英語の順番）</li>
</ol>

<p>というスタイルをとっている。</p>]]></content><author><name>悠</name></author><category term="Others" /><category term="English" /><category term="ニュース英語" /><category term="リスニング" /><category term="CNN10" /><summary type="html"><![CDATA[ま？攻略！ABCニュース（NHK）といい、飽き性の俺に対する挑戦か？笑]]></summary></entry><entry><title type="html">iPad Pro 10.5inchのカバーがボロボロになってきたので新しいのに買い替えた</title><link href="https://nyshiyama.github.io/mtnishi/items/gadgets/20210524/ipad_pro10.5-cover/" rel="alternate" type="text/html" title="iPad Pro 10.5inchのカバーがボロボロになってきたので新しいのに買い替えた" /><published>2021-05-24T00:00:00+00:00</published><updated>2021-05-24T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/items/gadgets/20210524/ipad_pro10.5-cover</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/items/gadgets/20210524/ipad_pro10.5-cover/"><![CDATA[<p><a href="https://www.amazon.co.jp/gp/product/B073QGWNQ3/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1">Amazon | KVAGO iPad Pro 10.5 キーボード ケース iPad Air3 2019 カバー ワイヤレス Bluetooth キーボード 7色バックライト 固定紐付き 手帳型 着脱式 スタンド機能付き 多角度調整 PUレザー ケース iPad10.5インチ対応 ゴールド | KVAGO | タブレットケース 通販</a></p>

<p>たしか、ゴールドがきれいだったのと、純正キーボードは高いのでお試しでワイヤレスキーボードがほしかったところ、カバーとキーボードのセットで4,266円は安いと思って購入した。</p>

<p>そのあと、1年も立たずに電源スイッチあたりがイカれてキーボードは使えなくなったが、ゴールド（パッと見は肌色っぽい、そういや肌色って人種によって違うからあかんとかいう話がどっかで出ていたなぁ）はきれいだし、一緒に買っていたApple Pencil用のケースを使ったらうまいことiPadを横向きで立てられるのでとくに困ることもなく使い続けていた。</p>

<p>しかし、最近になって一部が剥げてきた。MacBookの縁にあたったりしてというのもあるが、そもそも長いこと使っているので経年劣化もあるかと思い、買い替えた。</p>

<p><img src="/mtnishi/assets/images/ipadcover-kvago-overview.jpg" alt="alt" /></p>
<figcaption>正面から</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/ipadcover-kvago-scar1.jpg" alt="alt" /></p>
<figcaption>ぱったんぱったん折る部分がボロくなるのはしゃーない。むしろ4年弱でこれは耐えているのでは。</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/ipadcover-kvago-scar2.jpg" alt="alt" /></p>
<figcaption>画面を見る際に山折りとなる内側部分。ここがMacBookでゴリゴリと削られた笑</figcaption>
<p></p>

<p>で、買ったのがこれ。1,480円。</p>

<p><a href="https://www.amazon.co.jp/gp/product/B07G45HVS5/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1">Amazon | Infiland ipad air 3 ケース（2019）/ iPad pro 10.5ケース/ ペンホルダー付き apple pencil 一代 収納可能 三つ折スタンドカバー キズ防止 軽量 薄型 オートスリープ機能 半透明カバー （モデル番号A1701、A1709、A2152、A2123、A2153対応）（ネービーブルー） | Infiland | タブレットケース 通販</a></p>

<p>三つ折りで角度を2段階選べる、ペンホルダー付き、色選択肢が豊富、ってことで決定。最初はApple Pencil用のケースは別でもっているのでペンホルダーなしを探していたが、三つ折り便利そうってなったときにケースが邪魔にならないか（ケースはゴムバンド型でこれまでケースに留めていた）心配になったので。</p>

<p><img src="/mtnishi/assets/images/ipadcover-infiland-overview.jpg" alt="alt" /></p>
<figcaption>正面から。実際の色味より明るく見える。</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/ipadcover-infiland-back.jpg" alt="alt" /></p>
<figcaption>クリアケースとなっている裏面。iPad本体がシルバーなこともあってクリアケースはメタルブルー味があってよい。カバーの色味はこの写真右側に見えるものが実際に近い。</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/ipadcover-infiland-bottom.jpg" alt="alt" /></p>
<figcaption>レビューには平らに置くと若干斜めになるとあったが、とくに気になるほどではない。</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/ipadcover-infiland-side1.jpg" alt="alt" /></p>
<figcaption>60度バージョン。思ったより角度が付くな。前のカバーは45度が限界だったから新鮮。</figcaption>
<p></p>

<p><img src="/mtnishi/assets/images/ipadcover-infiland-side2.jpg" alt="alt" /></p>
<figcaption>30度バージョン。ペンを使う際は良い角度。</figcaption>
<p></p>

<p>想像以上に三つ折りの使い心地がよい。というより、前のカバーが悪かったらしい笑。あとスマホでチロチロっと加工したら割と良い写真になるので楽しくなっていつもよりたくさん写真をあげてしまった。GIMP姐さんの出番はなかったね。</p>]]></content><author><name>悠</name></author><category term="Items" /><category term="Gadgets" /><category term="iPad" /><category term="ガジェット" /><summary type="html"><![CDATA[購入当初から使っていたから、4年弱！そう考えると長いな。とくに有名でもないKVAGOから、これまたAmazonのオススメには紹介されていたなかったInfilandへ。]]></summary></entry><entry><title type="html">「AVSpeechSynthesizerでシミュレーターを再実行するまで再生できなくなる」エラー（Xcode12.4、Swift 5.3.2）</title><link href="https://nyshiyama.github.io/mtnishi/system/programming/20210523/swift-avspeechsynthesizer/" rel="alternate" type="text/html" title="「AVSpeechSynthesizerでシミュレーターを再実行するまで再生できなくなる」エラー（Xcode12.4、Swift 5.3.2）" /><published>2021-05-23T00:00:00+00:00</published><updated>2021-05-23T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/system/programming/20210523/swift-avspeechsynthesizer</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/system/programming/20210523/swift-avspeechsynthesizer/"><![CDATA[<h2 id="エラー概要">エラー概要</h2>

<p>問題のコード抜粋。</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">AVFoundation</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="kt">AVSpeechModel</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">synthesizer</span> <span class="o">=</span> <span class="kt">AVSpeechSynthesizer</span><span class="p">()</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">avSource0</span> <span class="o">=</span> <span class="kt">AVSpeechUtterance</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">avSource1</span> <span class="o">=</span> <span class="kt">AVSpeechUtterance</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">avSpeechSynthesizerSource</span> <span class="o">=</span> <span class="kt">AVSpeechSynthesizerSource</span><span class="p">()</span> <span class="c1">// AVSpeechSynthesizerDelegateをまとめたクラスのインスタンス</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">play</span><span class="p">()</span> <span class="p">{</span>

        <span class="n">avSource0</span> <span class="o">=</span> <span class="kt">AVSpeechUtterance</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="err">”</span><span class="n">hogehoge</span><span class="s">")
        avSource1 = AVSpeechUtterance(string: "</span><span class="n">fugafuga</span><span class="s">")

        synthesizer.speak(avSource0)
        synthesizer.speak(avSource1)
    }

    static func stop() {
        if synthesizer.isSpeaking {
            synthesizer.stopSpeaking(at: AVSpeechBoundary.immediate)
        }
    }
}
</span></code></pre></div></div>

<p>色々と省略しているが、今注目すべきは最後の<code class="language-plaintext highlighter-rouge">synthesizer.speak</code>2本。こうすると<code class="language-plaintext highlighter-rouge">avSource0</code>はすぐに再生され始めるが、<code class="language-plaintext highlighter-rouge">avSource1</code>は<code class="language-plaintext highlighter-rouge">synthesizer</code>のキューに保存される。<code class="language-plaintext highlighter-rouge">avSource0</code>の再生が終了すると自動的に<code class="language-plaintext highlighter-rouge">avSource1</code>の再生が始まる。</p>

<p>それで、ちょうど2つの再生間（<code class="language-plaintext highlighter-rouge">avSource0</code>の再生が終わった直後）で<code class="language-plaintext highlighter-rouge">synthesizer.stopSpeaking(at: AVSpeechBoundary.immediate)</code>を実行してからもう一度同じソースで<code class="language-plaintext highlighter-rouge">.speak()</code>を実行する、つまり<code class="language-plaintext highlighter-rouge">stop()</code>して<code class="language-plaintext highlighter-rouge">play()</code>するのだが、こうするとシミュレーターを再実行するまで何も再生されなくなる。</p>

<h2 id="解決方法を探る">解決方法を探る</h2>

<p>実際の解決方法はこのあと。</p>

<p><code class="language-plaintext highlighter-rouge">.stopSpeaking()</code>が何か悪さしてんのかな？と思うも、</p>

<blockquote>
  <p>シンセサイザーを停止すると、それ以降の発話はキャンセルされます。シンセサイザーが一時停止した場合とは異なり、発話は中断したところから再開できません。まだ発話されていない発話は、シンセサイザーのキューから削除されます。</p>

  <p><a href="https://developer.apple.com/documentation/avfaudio/avspeechsynthesizer">AVSpeechSynthesizer | Apple Developer Documentation</a></p>
</blockquote>

<p>でキューは削除されるしおすし。</p>

<p>あとでまったく別問題だとわかるのだが、はじめは「AddInstanceForFactory: No factory registered for id？」エラーか「_BeginSpeaking: couldn’t begin playback」エラーが原因だと考えていた。両方ともAVFoundationつながり？のエラーで、前者はシミュレーターを実行した直後から、後者は色々と再生を操作していると現れる。今回は結局これらとは関係していなかったので省略（なんならこいつらはまだ取り除けていない笑）。</p>

<p>上記エラーで出てきた対策を色々と試してみるも解決せず、でもやっぱりキューあたりが悪い？公式ドキュメントに</p>

<blockquote>
  <p>Attempting to enqueue the same utterance more than once throws an exception.（同じ発話を2回以上エンキューしようとすると、例外が発生します。）</p>

  <p><a href="https://developer.apple.com/documentation/avfaudio/avspeechsynthesizer/1619686-speak">speak(_:) | Apple Developer Documentation</a></p>
</blockquote>

<p>例外ってなに。とはいえ、ストップでキューを削除しているつもりがなんだかうまくいっていなくて同じソースを入れるから例外とやらが発生して死ぬのか？と考えた。</p>

<p>で、「synthesizer queue swift」でググる。</p>

<p><a href="https://www.timbroder.com/2014/03/avspeechsynthesizers-queue-doesnt-work/">AVSpeechSynthesizer’s queue doesn’t work - timbroder.com</a></p>

<p>ほう、同じようなエラーやないか。記事にあったリンク</p>

<p><a href="https://stackoverflow.com/questions/19672814/an-issue-with-avspeechsynthesizer-any-workarounds">ios - An issue with AVSpeechSynthesizer, Any workarounds? - Stack Overflow</a></p>

<p>に先人たちの格闘跡が。キタコレ。</p>

<h2 id="解決方法">解決方法</h2>

<p>ストップされるたびにインスタンスを再生成する。Delegateも再接続する必要がある。</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">stop</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">synthesizer</span><span class="o">.</span><span class="n">isSpeaking</span> <span class="p">{</span>
            <span class="n">synthesizer</span><span class="o">.</span><span class="nf">stopSpeaking</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="kt">AVSpeechBoundary</span><span class="o">.</span><span class="n">immediate</span><span class="p">)</span>
            <span class="n">synthesizer</span> <span class="o">=</span> <span class="kt">AVSpeechSynthesizer</span><span class="p">()</span> <span class="c1">// インスタンスを再生成しないと、2つの.speak()間で.stopSpeaking()を実行したときに再生できなくなるバグが生じる</span>
            <span class="n">synthesizer</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">avSpeechSynthesizerSource</span> <span class="c1">// 再生成したのでデリゲートも再接続</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Delegateの再接続部分は、ややこしいことをしていなければ<code class="language-plaintext highlighter-rouge">synthesizer.delegate = self</code>で済む。</p>

<p>なんでこれでいけるかって言われてもよくわかっていないしSwift側のバグが根幹にあるだろうが、<a href="https://github.com/apraka16/iOSAR/issues/13">On using AVSpeech… objects, warnings: TTSPlaybackCreate unable to init dynamics · Issue #13 · apraka16/iOSAR · GitHub</a>にあるように「performing access to the same synthesizers on several threads simultaneously.（同じシンセサイザーへのアクセスを複数のスレッドで同時に行う）」が原因なのかな？しらんけど。</p>

<h2 id="補足">補足</h2>

<p>もしかしたら、クラス内に定義で直接インスタンスを生成している（<code class="language-plaintext highlighter-rouge">synthesizer = AVSpeechSynthesizer()</code>とか）ことが原因で「AddInstanceForFactory: No factory registered for id？」エラーメッセージが出ているのかもしれない。あと「_BeginSpeaking: couldn’t begin playback」エラーも出てくるが、ガン無視で再生してくれる笑　なのでこの2つはいったん放置かな。</p>]]></content><author><name>悠</name></author><category term="System" /><category term="Programming" /><category term="Swift" /><category term="Xcode" /><category term="AVSpeechSynthesizer" /><summary type="html"><![CDATA[これまであまり気にせずアプリ開発を進めてきたが、絶対に放っておけないエラーなのでがんばって対処した。そうはいっても色々調べていくとひとまずの解決方法が見つかったのでそれをパクることになった。iOS7？くらいからってことは最初からか（笑）、既知のバグっぽい。]]></summary></entry><entry><title type="html">ニックのA4シートを見てみる</title><link href="https://nyshiyama.github.io/mtnishi/others/english/20210522/nic_shiki_eikaiwa-a4_sheet/" rel="alternate" type="text/html" title="ニックのA4シートを見てみる" /><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://nyshiyama.github.io/mtnishi/others/english/20210522/nic_shiki_eikaiwa-a4_sheet</id><content type="html" xml:base="https://nyshiyama.github.io/mtnishi/others/english/20210522/nic_shiki_eikaiwa-a4_sheet/"><![CDATA[<p><a href="https://www.amazon.co.jp/%EF%BC%A1%EF%BC%94%E4%B8%80%E6%9E%9A%E8%8B%B1%E8%AA%9E%E5%8B%89%E5%BC%B7%E6%B3%95-%E8%A6%8B%E3%82%8B%E3%81%A0%E3%81%91%E3%81%A7%E8%8B%B1%E8%AA%9E%E3%83%9A%E3%83%A9%E3%83%9A%E3%83%A9%E3%81%AB%E3%81%AA%E3%82%8B-%E3%83%8B%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A3%E3%83%AA%E3%82%A2%E3%83%A0%E3%82%BD%E3%83%B3-ebook/dp/B08KT6GMYY/ref=pd_ybh_a_1?_encoding=UTF8&amp;psc=1&amp;refRID=ZZZS9S3B54HH6C5D3CER">Amazon.co.jp： Ａ４一枚英語勉強法　見るだけで英語ペラペラになる eBook: ニック・ウィリアムソン: Kindleストア</a></p>

<p>もしかして、と思い調べてみると、なんと本書の肝であるA4ノートと単語リストがだれでも無料でダウンロードできる状態だった。いいのか？</p>

<p><a href="https://www.sbcr.jp/support/4815607370/">『Ａ４一枚英語勉強法』読者特典データダウンロードサービス | SBクリエイティブ</a></p>

<p>しかも基本的な使い方はYouTubeで紹介している。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/V3VXe5kOxWc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<p></p>

<p>商売になるのか？まあYouTubeチャンネルの登録者数がこれで増えるなら儲けもんか。</p>

<p>とにかくまず時制を考えようぜ。ということでパーツAを考える。</p>

<p>ニックの説明を聞いていると、日本語ってややこしいなと逆に考えてしまうw　未来のことなのに過去のような言い方をするね、たしかに。</p>

<p>「明日彼が<strong>来た</strong>ら話しましょう」</p>

<p>パーツD「後に付け足すもの」は「奇跡の応用」と呼ばれるもの。これもYouTubeで個別に取り上げられている。</p>

<p>書籍の内容は、ダウンロードコンテンツと対応するYouTubeチャンネルの動画でほとんどカバーできるんじゃないか？ということで、自分は無料でA4シートを使い倒します笑</p>]]></content><author><name>悠</name></author><category term="Others" /><category term="English" /><category term="ニック式英会話" /><category term="英語学習" /><category term="YouTube" /><summary type="html"><![CDATA[Kindleストアの50%ポイント還元セールに、YouTubeでたまに観るニック先生「ニック式英会話チャンネル」の新しいテキストが紹介されていた。実質半額で825円。安いとは思う。]]></summary></entry></feed>